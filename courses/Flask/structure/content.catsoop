<section>Page Specification and Loading</section>

CAT-SOOP courses are stored using files on disk.  The structure of the web site
mirrors the structure of the directories on disk.  Having a directory at
`course_root/page` means that a page will be available at
`http://my.site/page`.

Names beginning with underscores or dots are hidden (not web accessible), so if
you plan on storing other things inside the same repository, you should make
sure their names start with an underscore.

Inside of each page's directory, there should be a file called
`content.catsoop`.  This file contains the page's source (see the
[Markdown](COURSE/markdown) and [Questions](COURSE/questions) pages for more
information about how these files are structured).

<subsection>Magic Variables and Inheritance</subsection>

A lot of behavior in CAT-SOOP is defined by the values stored in "magic"
variables with particular names.  These variables control various aspects of
the page's appearance, among other things.  Typically, all magic variables
begin with the prefix `cs_` (or `csq_` if they control aspects of a _question_
rather than a page).

In addition to `content.catsoop`, each directory can also contain a file called
`preload.py`, which is typically used to set these magic variables.  Each page
inherits the values resulting from the `preload.py` "above" it in the directory
structure.  In particular, on each page load:

* An empty environment $E_1$ is created
* All the `preload.py` files leading up to the requested page are executed in
    $E_1$, one after the other, starting with the root.
* User authentication occurs
* Includes are processed
* All Python tags on the given page are executed in $E_1$
* Each question tag on the page creates a new environment $E_i$ inheriting from
    $E_1$, and the code from the question tag is evaluated in $E_i$

So values set in the top-level `preload.py` affect all pages beneath them
(unless those values are overridden).  Values set in Python tags in a
particular page's `content.catsoop` affect only that page, and values set in
`question` tags on a page affect only that particular question.

<section>Static Files and Linking</section>

Static files (i.e., those not generated by a `content.catsoop`) are treated
differently.  They should be placed inside a directory called `__STATIC__`
within a page's folder.

Both static files and dynamic content can be linked to using a short-hand
syntax.  For example, imagine that there is a page `course_root/homeworks/week1`
and a static file `course_root/homeworks/__STATIC__/an_image.png`.
In the `content.catsoop` for the course, these could be linked to as `CURRENT/week1`
and `CURRENT/an_image.png`, respectively.  `CURRENT` always refers to the
location of the page currently being loaded.

Similarly, from any page within the course, those files could be linked to as
`COURSE/homeworks/week1` and `COURSE/homeworks/an_image.png`, respectively.

<section>Controlling Access to Pages</section>

<subsection>Permissions</subsection>

Users' roles are determined by the files in the `__USERS__` directory.  Each
user should have a file there, named like `username.py`.  One way to handle
permissions is to define a variable called `permission` in each of these files,
which points to a list containing one or more strings describing what that user
is allowed to do:

* `'view'`: allowed to view the contents of a page
* `'submit'`: allowed to submit to a page
* `'view_all'`: always allowed to view every page, regardless of when it releases
* `'submit_all'`: always allowed to submit to every question, regardless of when it releases or is due
* `'impersonate'`: allowed to view the page "as" someone else
* `'admin'`: administrative tasks (such as modifying group assignments)
* `'whdw'`: allowed to see "WHDW" page (Who Has Done What)
* `'email'`: allowed to send e-mail through CAT-SOOP
* `'grade'`: allowed to submit grades

Since many groups of users often share the same permission levels, a more
common way to handle permissions is to assign each user a 'role', and to define
`cs_permissions` in `preload.py` as a dictionary mapping role names to the
permissions associated with that role.  Take a look at `preload.py`, where such
a mapping is defined.  A couple of `__USERS__` files are also included in this
sample course.

<subsection>Release and Due Dates</subsection>

`cs_release_date` controls the date at which a page is "released" to a student
(i.e., that it becomes visible to those with the `view` permission).  It can
always be specified as a string `"YYYY-MM-DD:HH:MM"`, and it can also be
specified based on course-specific meeting times (see the `preload.py` file for
more information).

Similarly, `cs_due_date` controls when the questions on a page come due.  In
CAT-SOOP, the default behavior is to allow submissions after the due date.  To
implement a hard deadline and lock students out from submitting after a
deadline, set `cs_auto_lock = True`.
